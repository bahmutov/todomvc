'use strict';

var joinPath = require('path').join;
var relative = require('path').relative;
var normalize = require('normalize-path');
var fs = require('fs');
var Promise = require('pinkie-promise');
var fstreamNpm = require('fstream-npm');

function readFile(path) {
    return new Promise(function (resolve, reject) {
        fs.readFile(path, function (err, data) {
            if (err) reject(err);else resolve(data.toString());
        });
    });
}

function readCfg(dir) {
    return readFile(joinPath(dir, 'package.json')).catch(function () {
        throw new Error("package.json file doesn't exist.");
    }).then(function (data) {
        try {
            return JSON.parse(data);
        } catch (err) {
            throw new Error('package.json is not a valid JSON-file.');
        }
    });
}

function getPkgFiles(dir) {
    return new Promise(function (resolve, reject) {
        // NOTE: see https://github.com/npm/fstream-npm/blob/master/fstream-npm.js#L320
        var rootDir = joinPath(dir, '../package');
        var files = [];

        fstreamNpm({ path: dir }).on('entry', function (entry) {
            var path = normalize(relative(rootDir, entry.path));

            files.push(path);
        }).once('error', reject).once('end', function () {
            return resolve(files);
        });
    });
}

module.exports = function getPkgInfo(dir) {
    var info = {
        cfg: null,
        files: null
    };

    dir = dir || process.cwd();

    return readCfg(dir).then(function (cfg) {
        return info.cfg = cfg;
    }).then(function () {
        return getPkgFiles(dir);
    }).then(function (files) {
        return info.files = files;
    }).then(function () {
        return info;
    });
};